pipeline {
    agent any
    
    environment {
        IMAGE_NAME = "lokesh579/maven-agent:v1"
        CONTAINER_NAME = "spring-boot-app"
        DOCKER_REGISTRY = "lokesh579" // Change if pushing to a registry
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out repository..."
                    checkout scm
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Building the project with Maven..."
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                }
            }
        }

        stage('Verify Build') {
            steps {
                script {
                    echo "Checking if JAR file exists..."
                    sh 'ls -ltr java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image..."
                    sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    docker build -t ${IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo "Running the Docker Container..."
                    sh '''
                    docker run -d --rm --name ${CONTAINER_NAME} -p 8080:8080 ${IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    echo "Pushing Docker Image to Registry..."
                    sh '''
                    docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up resources..."
            sh 'docker stop ${CONTAINER_NAME} || true'
        }
    }
}
